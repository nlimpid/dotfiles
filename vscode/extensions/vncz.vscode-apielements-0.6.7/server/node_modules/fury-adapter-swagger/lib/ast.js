'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _yamlJs = require('yaml-js');

var _yamlJs2 = _interopRequireDefault(_yamlJs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// A module for dealing with YAML syntax trees and looking up source map
// location information.

var Ast = function () {
  function Ast(source) {
    (0, _classCallCheck3.default)(this, Ast);

    this.root = _yamlJs2.default.compose(source);
  }

  // Look up a position in the original source based on a JSON path, for
  // example ['paths', '/test', 'get', 'responses', '200']. Also supported
  // is using a string ('paths./test.get') but it does not understand any
  // escaping.


  (0, _createClass3.default)(Ast, [{
    key: 'getPosition',
    value: function getPosition(path) {
      var pieces = _lodash2.default.isArray(path) ? [].concat(path) : path.split('.');
      var end = void 0;
      var node = this.root;
      var piece = pieces.shift();
      var start = void 0;

      if (!node) {
        return null;
      }

      while (piece !== undefined) {
        var newNode = null;

        if (node.tag === 'tag:yaml.org,2002:map') {
          // This is a may / object with key:value pairs.
          // eslint-disable-next-line no-restricted-syntax
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = (0, _getIterator3.default)(node.value), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var subNode = _step.value;

              if (subNode[0] && subNode[0].value === piece) {
                newNode = subNode[1];

                if (!pieces.length) {
                  // This is the last item!
                  start = subNode[0].start_mark.pointer;
                  end = subNode[1].end_mark.pointer;
                }
                break;
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        } else if (node.tag === 'tag:yaml.org,2002:seq') {
          // This is a sequence, i.e. array. Access it by index.
          newNode = node.value[piece];

          if (!pieces.length) {
            // This is the last item!

            if (!newNode && piece > 0 && node.value[piece - 1]) {
              // Element in sequence does not exist. It could have been empty
              // Let's provide the end of previous element
              start = node.value[piece - 1].end_mark.pointer;
              end = start + 1;
            } else {
              start = newNode.start_mark.pointer;
              end = newNode.end_mark.pointer;
            }
          }
        } else {
          // Unknown piece, which will just return no source map.
          return null;
        }

        if (newNode) {
          node = newNode;
        } else {
          // We have no other node so return whatever we have.
          // Better than nothing init?
          return { start: start, end: end };
        }

        piece = pieces.shift();
      }

      return { start: start, end: end };
    }
  }]);
  return Ast;
}();

exports.default = Ast;
//# sourceMappingURL=ast.map