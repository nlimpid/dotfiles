'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

exports.bodyFromSchema = bodyFromSchema;
exports.bodyFromFormParameter = bodyFromFormParameter;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _querystring = require('querystring');

var _querystring2 = _interopRequireDefault(_querystring);

var _jsonSchemaFaker = require('json-schema-faker');

var _jsonSchemaFaker2 = _interopRequireDefault(_jsonSchemaFaker);

var _annotations = require('./annotations');

var _annotations2 = _interopRequireDefault(_annotations);

var _link = require('./link');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_jsonSchemaFaker2.default.option({
  useDefaultValue: true,
  maxItems: 5,
  maxLength: 256
});

function bodyFromSchema(schema, payload, parser) {
  var contentType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'application/json';
  var Asset = parser.minim.elements.Asset;

  var asset = null;

  try {
    var body = schema.example || (0, _jsonSchemaFaker2.default)(schema);

    if (typeof body !== 'string') {
      if (contentType.indexOf('x-www-form-urlencoded') !== -1) {
        // Form data
        // TODO: check for arrays etc.
        body = _querystring2.default.stringify(body);
      } else {
        // JSON
        body = (0, _stringify2.default)(body, null, 2);
      }
    }

    asset = new Asset(body);

    asset.classes.push('messageBody');
    asset.contentType = contentType;

    (0, _link.inferred)('message-body-generation', asset, parser);

    payload.content.push(asset);
  } catch (exception) {
    parser.createAnnotation(_annotations2.default.DATA_LOST, parser.path, 'Unable to generate ' + contentType + ' example message body out of JSON Schema');
  }

  return asset;
}

// Generates body asset from formData parameters.
function bodyFromFormParameter(param, schema) {
  // Preparing throwaway schema. Later we will feed the 'bodyFromSchema'
  // with it.
  var paramSchema = _lodash2.default.clone(param);
  var retSchema = _lodash2.default.clone(schema);

  // If there's example value, we want to force the body generator
  // to use it. This is done using 'enum' with a single value.
  if (param['x-example'] !== undefined) {
    paramSchema.enum = [param['x-example']];
  }

  delete paramSchema.name;
  delete paramSchema.in;
  delete paramSchema.format;
  delete paramSchema.required;
  delete paramSchema['x-example'];
  delete paramSchema.collectionFormat;
  delete paramSchema.allowEmptyValue; // allowEmptyValue is not supported yet
  delete paramSchema.items; // arrays are not supported yet

  retSchema.properties[param.name] = paramSchema;

  if (param.required) {
    retSchema.required.push(param.name);
  }

  return retSchema;
}

exports.default = { bodyFromSchema: bodyFromSchema, bodyFromFormParameter: bodyFromFormParameter };
//# sourceMappingURL=generator.map