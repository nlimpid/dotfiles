'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _minim = require('minim');

var _minim2 = _interopRequireDefault(_minim);

var _minimParseResult = require('minim-parse-result');

var _minimParseResult2 = _interopRequireDefault(_minimParseResult);

var minim = _minim2['default'].namespace().use(_minimParseResult2['default']);

/*
 * Find an adapter by a given media type and method name, which should be
 * either `parse` or `serialize`. If no adapter is found, then
 * undefined is returned.
 */
function _findAdapter(adapters, mediaType, method) {
  for (var i = 0; i < adapters.length; i++) {
    if (adapters[i].mediaTypes.indexOf(mediaType) !== -1 && adapters[i][method]) {
      return adapters[i];
    }
  }
}

var Fury = (function () {
  function Fury() {
    _classCallCheck(this, Fury);

    this.adapters = [];
  }

  /*
    Since we need to provide a sane interface to both ES6 `import` and
    normal Node.js `require` statements, we make a single default export
    and set up some other faux exports within it. See Babel's module
    docs: https://babeljs.io/docs/usage/modules/.
  */

  /*
   * Register to use an adapter with this Fury instance.
   */

  _createClass(Fury, [{
    key: 'use',
    value: function use(adapter) {
      this.adapters.push(adapter);
      return this;
    }

    /*
     * Load serialized refract elements into Javascript objects.
     */
  }, {
    key: 'load',
    value: function load(elements) {
      return minim.fromRefract(elements);
    }
  }, {
    key: 'findAdapter',
    value: function findAdapter(source, mediaType, method) {
      var adapter = undefined;

      if (mediaType) {
        adapter = _findAdapter(this.adapters, mediaType, method);
      } else {
        for (var i = 0; i < this.adapters.length; i++) {
          var current = this.adapters[i];
          if (current.detect && current.detect(source) && current[method]) {
            adapter = this.adapters[i];
            break;
          }
        }
      }

      return adapter;
    }
  }, {
    key: 'validate',
    value: function validate(_ref, done) {
      var _this = this;

      var source = _ref.source;
      var mediaType = _ref.mediaType;
      var adapterOptions = _ref.adapterOptions;

      var adapter = this.findAdapter(source, mediaType, 'validate');

      if (!adapter) {
        return this.parse({ source: source, mediaType: mediaType, adapterOptions: adapterOptions }, function (err, result) {
          if (result && result.annotations.length > 0) {
            var ParseResult = minim.elements.ParseResult;

            var parseResult = new ParseResult(result.annotations);
            done(err, parseResult);
          } else {
            done(err, null);
          }
        });
      }

      var options = { minim: minim, source: source };

      if (adapterOptions) {
        options = _Object$assign(options, adapterOptions);
      }

      adapter.validate(options, function (err, elements) {
        if (!elements || elements instanceof minim.BaseElement) {
          done(err, elements);
        } else {
          done(err, _this.load(elements));
        }
      });
    }

    /*
     * Parse an input document into Javascript objects. This method uses
     * the registered adapters to automatically detect the input format,
     * then uses the adapter to convert into refract elements and loads
     * these into objects.
     */
  }, {
    key: 'parse',
    value: function parse(_ref2, done) {
      var _this2 = this;

      var source = _ref2.source;
      var mediaType = _ref2.mediaType;
      var _ref2$generateSourceMap = _ref2.generateSourceMap;
      var generateSourceMap = _ref2$generateSourceMap === undefined ? false : _ref2$generateSourceMap;
      var adapterOptions = _ref2.adapterOptions;

      var adapter = this.findAdapter(source, mediaType, 'parse');

      if (!adapter) {
        return done(new Error('Document did not match any registered parsers!'));
      }

      try {
        var options = { generateSourceMap: generateSourceMap, minim: minim, source: source };

        if (adapterOptions) {
          options = _Object$assign(options, adapterOptions);
        }

        adapter.parse(options, function (err, elements) {
          if (!elements) {
            done(err);
          } else if (elements instanceof minim.BaseElement) {
            done(err, elements);
          } else {
            done(err, _this2.load(elements));
          }
        });
      } catch (err) {
        return done(err);
      }
    }

    /*
     * Serialize a parsed API into the given output format.
     */
  }, {
    key: 'serialize',
    value: function serialize(_ref3, done) {
      var api = _ref3.api;
      var _ref3$mediaType = _ref3.mediaType;
      var mediaType = _ref3$mediaType === undefined ? 'text/vnd.apiblueprint' : _ref3$mediaType;

      var adapter = _findAdapter(this.adapters, mediaType, 'serialize');

      if (adapter) {
        try {
          adapter.serialize({ api: api, minim: minim }, done);
        } catch (err) {
          return done(err);
        }
      } else {
        done(new Error('Media type did not match any registered serializer!'));
      }
    }
  }]);

  return Fury;
})();

var fury = new Fury();

fury.Fury = Fury;

exports['default'] = fury;
module.exports = exports['default'];
//# sourceMappingURL=fury.map