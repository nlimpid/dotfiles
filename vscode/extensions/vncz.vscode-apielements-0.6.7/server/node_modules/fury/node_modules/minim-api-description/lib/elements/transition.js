'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

exports['default'] = function (namespace) {
  var ArrayElement = namespace.getElementClass('array');

  var Transition = (function (_ArrayElement) {
    _inherits(Transition, _ArrayElement);

    function Transition() {
      _classCallCheck(this, Transition);

      _get(Object.getPrototypeOf(Transition.prototype), 'constructor', this).apply(this, arguments);

      this.element = 'transition';
    }

    _createClass(Transition, [{
      key: 'method',
      get: function get() {
        var transaction = this.transactions.first();
        if (transaction) {
          var request = transaction.request;
          if (request) {
            return request.method;
          }
        }
      }
    }, {
      key: 'relation',
      get: function get() {
        return this.attributes.getValue('relation');
      },
      set: function set(value) {
        this.attributes.set('relation', value);
      }
    }, {
      key: 'href',
      get: function get() {
        return this.attributes.getValue('href');
      },
      set: function set(value) {
        this.attributes.set('href', value);
      }
    }, {
      key: 'computedHref',
      get: function get() {
        try {
          return this.href ? this.href : this.transactions.get(0).request.href;
        } catch (err) {
          return null;
        }
      }
    }, {
      key: 'hrefVariables',
      get: function get() {
        return this.attributes.get('hrefVariables');
      },
      set: function set(value) {
        this.attributes.set('hrefVariables', value);
      }
    }, {
      key: 'data',
      get: function get() {
        return this.attributes.get('data');
      },
      set: function set(value) {
        this.attributes.set('data', value);
      }
    }, {
      key: 'contentTypes',
      get: function get() {
        return this.attributes.get('contentTypes');
      },
      set: function set(value) {
        this.attributes.set('contentTypes', value);
      }
    }, {
      key: 'transactions',
      get: function get() {
        return this.children(function (item) {
          return item.element === 'httpTransaction';
        });
      }
    }]);

    return Transition;
  })(ArrayElement);

  namespace.register('transition', Transition);
};

module.exports = exports['default'];