/*
 * Parse result-specific refract elements.
 *
 * General structure:
 *
 * + ParseResult
 *   + Annotation
 */

'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.namespace = namespace;

var _minimApiDescription = require('minim-api-description');

var _minimApiDescription2 = _interopRequireDefault(_minimApiDescription);

function namespace(options) {
  var minim = options.base;
  var ArrayElement = minim.getElementClass('array');
  var StringElement = minim.getElementClass('string');

  var ParseResult = (function (_ArrayElement) {
    _inherits(ParseResult, _ArrayElement);

    function ParseResult() {
      _classCallCheck(this, ParseResult);

      _get(Object.getPrototypeOf(ParseResult.prototype), 'constructor', this).apply(this, arguments);
      this.element = 'parseResult';
    }

    _createClass(ParseResult, [{
      key: 'api',
      get: function get() {
        return this.children(function (item) {
          return item.classes.contains('api');
        }).first();
      }
    }, {
      key: 'annotations',
      get: function get() {
        return this.children(function (item) {
          return item.element === 'annotation';
        });
      }
    }, {
      key: 'warnings',
      get: function get() {
        return this.children(function (item) {
          return item.element === 'annotation' && item.classes.contains('warning');
        });
      }
    }, {
      key: 'errors',
      get: function get() {
        return this.children(function (item) {
          return item.element === 'annotation' && item.classes.contains('error');
        });
      }
    }]);

    return ParseResult;
  })(ArrayElement);

  var Annotation = (function (_StringElement) {
    _inherits(Annotation, _StringElement);

    function Annotation() {
      _classCallCheck(this, Annotation);

      _get(Object.getPrototypeOf(Annotation.prototype), 'constructor', this).apply(this, arguments);
      this.element = 'annotation';
    }

    _createClass(Annotation, [{
      key: 'code',
      get: function get() {
        return this.attributes.getValue('code');
      },
      set: function set(value) {
        this.attributes.set('code', value);
      }
    }]);

    return Annotation;
  })(StringElement);

  var SourceMap = (function (_minim$BaseElement) {
    _inherits(SourceMap, _minim$BaseElement);

    function SourceMap() {
      _classCallCheck(this, SourceMap);

      _get(Object.getPrototypeOf(SourceMap.prototype), 'constructor', this).apply(this, arguments);
      this.element = 'sourceMap';
    }

    return SourceMap;
  })(minim.BaseElement);

  minim.use(_minimApiDescription2['default']).register('parseResult', ParseResult).register('annotation', Annotation).register('sourceMap', SourceMap);
}

exports['default'] = { namespace: namespace };
//# sourceMappingURL=parse-result.map